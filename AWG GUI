# code for the basic Tkinter GUI I implemented. 
# I found it much easier to actually run the feedback loop using individual files since the Tkinter GUI kept crashing, couldn't store
# intermediate waveforms, and was overall very clunky to use. However, my assignment was to make a GUI.
AWG Feedback Loop
import numpy as np
import math
from tkinter import filedialog as fd
from tkinter import *


# our target constant amplitude
amplitude = 10


def read_single_waveform_input(filename):
    my_wf = pd.read_csv(filename)
    my_wf = my_wf.iloc[:, 1].values
    input_array = my_wf
    
def read_multiple_waveforms_input(filename):
    all_wfs_1 = pd.read_csv(filename)
    all_wfs = []
    i=0
    for column in all_wfs_1:
        all_wfs[i] = all_wfs_1.loc[:, column].values
        i+=1
    all_inputs = all_wfs

def read_single_waveform_output(filename):
    my_wf = pd.read_csv(filename)
    my_wf = my_wf.iloc[:, 1].values
    output_array = my_wf
    
def read_multiple_waveforms_output(filename):
    all_wfs_1 = pd.read_csv(filename)
    all_wfs = []
    i=0
    for column in all_wfs_1:
        all_wfs[i] = all_wfs_1.loc[:, column].values
        i+=1
    all_outputs = all_wfs

window = Tk()
window.title("Feedback Loop")
input_array = []
output_array = []
uppers = []
lowers = []
all_inputs = []
all_outputs = []
target_amplitude = 4000
run_number = 0
        
def give_new_waveform():
    new_input = get_new_input(input_wf, output_wf, target_amplitude)
    with open("new_input.csv", "w") as file:
        Writer = writer(file)
        for x in new_input:
            Writer.writerow([x])

def get_final_input():
    final_input = make_final_input(all_inputs, all_outputs, target_amplitude)
    with open("final_input.csv", "w") as file:
        Writer = writer(file)
        for x in new_input:
            Writer.writerow([x])

# open button
input_open_button = Button(
    window,
    text='Open the input waveform',
    command=read_single_waveform_input
)

output_open_button = Button(
    window,
    text='Open the output waveform',
    command=read_single_waveform_output
)

open_all_inputs_button = Button(
    window,
    text = 'Open a file containing multiple input wfs',
    command = read_multiple_waveforms_input
)

open_all_outputs_button = Button(
    window,
    text = 'Open a file containing mutliple output wfs',
    command = read_multiple_waveforms_output
)

get_new_input_button = Button(
    window,
    text = 'Generate a new input. Must have uploaded an input and an output.'
    command = give_new_waveform
)

get_final_input_button = Button(
    window,
    text = 'Generate a final input. Must have uploaded at least 2 inputs/outputs.'
    command = get_final_input
)

input_open_button.pack(expand=True)
output_open_button.pack(expand=True)
open_all_inputs_button.pack(expand=True)
open_all_outputs_button.pack(expand=True)
get_new_input_button.pack(expand=True)


window.mainloop()

# can ignore after this point

# final = ultra_fit(np.array([0 for i in range(200)]))
# print(amplitude - 2 * math.exp(.898 * final[0]))


# arbitrary functions used in testing
def run(input):
    return [2 * (math.exp(.898*i)) for i in input]
    
# another intermediate function I used, kept here because snippets of its code are useful
def ultra_fit(input):
    # 500 randomly generated input waveforms to create a gain function
    input_trackers = [np.array(np.random.uniform(low=5, high=10, size=len(input))) for i in range(500)]
    
    # the output waveform resulting from applying the gain to each input waveform
    output_trackers = [[0 for i in range(len(input))] for i in range(500)]
    
    # the parameters for each gain function for each point on the waveform
    parameters = [[0 for i in range(2)] for i in range(len(input))]
    
    # trackers to be used for fitting the gain function for each point on the waveform
    x = [0 for i in range(500)]
    y = [0 for i in range(500)]
    
    # our optimized input waveform
    final_input = [0 for i in range(len(input))]
    
    # gets the values for output_trackers
    for i in range(500):
        output_trackers[i] = run(input_trackers[i])
    
    # determines our parameters
    for i in range(len(input)):
        # this for loop finds the corresponding 500 inputs/outputs for a given point on the waveform
        for j in range(500):
            x[j] = input_trackers[j][i]
            y[j] = output_trackers[j][i]
        parameters[i] = np.polyfit(x, np.log(y), 1) 
    
    # constructs the final waveform using our generated parameters
    for i in range(len(input)):
        final_input[i] = (np.log(amplitude) - parameters[i][1]) / parameters[i][0]
    
    return final_input
    
# forgot the use of this function    
    
def run():
    optimized_input = [0 for i in range(len(input_array))]
    run_number = len(all_inputs)
    # we know the gain function is A * exp(B * x)
    # so increasing the input from c->d increases the output by a factor of (e^B(d-c))
    all_inputs.append(input_array)
    all_outputs.append(output_array)
    if (run_number < 1):
        uppers.append([10 for x in input_array]) # or some number
        lowers.append([0 for x in input_array]) # or some number
    else:
        last_input = all_inputs[run_number - 1]
        last_output = all_outputs[run_number - 1]
        for i in range(len(input_array)):
            a = np.log(output_array[i] / last_output[i])
            b = input_array[i] - last_input[i]
            this_b = a/b
            this_a = output_array[i] / (math.exp(this_b * input_array[i]))
            # equations are good
            # current_parameters[i] = [this_a, this_b]
            optimized_input[i] = np.log(target_amplitude / this_a) / this_b
            if uppers[0][i] >= optimized_input[i]:
                uppers[0][i] = .5 * (uppers[0][i] + optimized_input[i])
            else:
                uppers[0][i] += 1.5 * (optimized_input[i] - uppers[0][i])
            if lowers[0][i] < optimized_input[i]:
                lowers[0][i] = .5 * (lowers[0][i] + optimized_input[i])
            else:
                lowers[0][i] -= 1.5 * (lowers[0][i] - optimized_input[i])








